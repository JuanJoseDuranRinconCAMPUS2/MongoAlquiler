

//Alquiler Campus

//Ejercicios:

//1
// Mostrar todos los clientes registrados en la base de datos

use("db_campus_alquiler");
db.cliente.find();

//2
// Obtener todos los automóviles disponibles para alquiler.

// encontre este metodo que permite seleccionar que data quiero mostrar dentro del objeto con la relacion, sino ademas me permite elegir los nombres para cada llave
use("db_campus_alquiler");
db.getCollection("automovil").aggregate([  
    {    
        $lookup: {      
            from: "alquiler",     
            localField: "_id",      
            foreignField: "automovil_id",      
            as: "Alquileres"   
         }  
    },  
    {
        $match: {Alquileres: { $ne: [] }}
    },
    {    
        $project: {     
            Marca: 1,      
            Modelo: 1,     
            Anio: 1,      
            Tipo: 1,      
            Capacidad: 1,      
            Precio_Diario: 1,      
            Alquileres: {
                $map: {
                  input: "$Alquileres",
                  as: "alquiler",
                  in: {
                    id: "$$alquiler._id",
                    Fecha_Inicio: "$$alquiler.Fecha_Inicio",
                    Fecha_Fin: "$$alquiler.Fecha_Fin",
                    Costo_Total: "$$alquiler.Costo_Total",
                    Estado: "$$alquiler.Estado"
                  }
                }
            }
        } 
    } 
]);

//3
// Listar todos los alquileres activos junto con los datos de los lientes relacionados. 

use("db_campus_alquiler");
db.getCollection("alquiler").aggregate([  
    {    
        $lookup: {      
            from: "cliente",     
            localField: "cliente_id",      
            foreignField: "_id",      
            as: "Clientes"   
         }  
    },  
    {
        $match: {Clientes: { $ne: [] }, Estado: { $eq: "Activo" }}
    },
    {
        $unwind: "$Clientes"
    },
    {    
        $project: {     
            "Clientes.ID_Cliente": 0,
        } 
    },
    {
        $group: {
            _id: "$_id",
            Fecha_Inicio: {
                $first: "$Fecha_Inicio"
            },
            Fecha_Fin: {
                $first: "$Fecha_Fin"
            },
            Costo_Total: {
                $first: "$Costo_Total"
            },
            Estado: {
                $first: "$Estado"
            },
            Clientes: {
                $push: "$Clientes"
            },
        }
    }
]);

//4
// Mostrar todas las reservas pendientes con los datos del cliente y el automóvil reservado

use("db_campus_alquiler");
db.getCollection("reserva").aggregate([  
    {    
        $lookup: {      
            from: "cliente",     
            localField: "cliente_id",      
            foreignField: "_id",      
            as: "Clientes"   
         }  
    }, 
    {    
        $lookup: {      
            from: "automovil",     
            localField: "automovil_id",      
            foreignField: "_id",      
            as: "Automoviles"   
         }  
    },   
    {
        $match: {Clientes: { $ne: [] }, Estado: { $eq: "Pendiente" }, Automoviles: { $ne: [] }}
    },
    {
        $unwind: "$Clientes"
    },
    {    
        $project: {     
            "Clientes.ID_Cliente": 0,
            "Automoviles.ID_Automovil": 0
        } 
    },
    {
        $group: {
            _id: "$_id",
            Fecha_Reserva: {
                $first: "$Fecha_Reserva"
            },
            Fecha_Inicio: {
                $first: "$Fecha_Inicio"
            },
            Fecha_Fin: {
                $first: "$Fecha_Fin"
            },
            Estado: {
                $first: "$Estado"
            },
            Clientes: {
                $push: "$Clientes"
            },
            Automoviles: {
                $push: "$Automoviles"
            }
        }
    }
]);

//5
//  Obtener los detalles del alquiler con el ID_Alquilerespecífico. 

use("db_campus_alquiler");
db.alquiler.find({ ID_Alquiler: { $eq: 2 }})

//6
//  Listar los empleados con el cargo de "Vendedor".

use("db_campus_alquiler");
db.empleado.find({ Cargo: { $eq: "Vendedor" }});

//7
//  Mostrar la cantidad total de automóviles disponibles en cada sucursal. 

use("db_campus_alquiler");
db.getCollection("sucursal").aggregate([  
    {    
        $lookup: {      
            from: "sucursal_automovil",     
            localField: "_id",      
            foreignField: "sucursal_id",      
            as: "Cantidad_Automovil"   
         }  
    },  
    {
        $match: {CantididadAutomovil: { $ne: [] }}
    },
    {
        $unwind: "$Cantidad_Automovil"
    },
    {    
        $project: {     
            "Cantidad_Automovil.sucursal_id": 0,
            "Cantidad_Automovil.automovil_id": 0
        } 
    },
    {
        $group: {
            _id: "$_id",
            Nombre: {
                $first: "$Nombre"
            },
            Dirrecion: {
                $first: "$Dirrecion"
            },
            Telefono: {
                $first: "$Telefono"
            },
            Cantidad_Automovil: {
                $first: "$Cantidad_Automovil"
            },
            Total_Automoviles: {
                $sum: "$Cantidad_Automovil.Cantidad_Disponible"
            }
        }
    }
]);

//8
//  Obtener el costo total de un alquiler específico.

use("db_campus_alquiler");
db.alquiler.find({ ID_Alquiler: { $eq: 5 }},
    { _id: 1, Costo_Total: 1 });

//9
// Listar los clientes con el DNI específico.

use("db_campus_alquiler");
db.cliente.find({ DNI: { $eq: "343434" }});

//DNI DISPONIBLES:
// 343434
// 1225631215
// 22554451
// 45897812564
// 125233544

//10
// Mostrar todos los automóviles con una capacidad mayor a 5 personas. 

use("db_campus_alquiler");
db.automovil.find({ Capacidad: { $gt: 5 }});

//11
// Obtener los detalles del alquiler que tiene fecha de inicio en '2023-07-05'.

use("db_campus_alquiler");
db.alquiler.find({ Fecha_Inicio: { $eq: "07-05-2023" }});

//12
// Listar las reservas pendientes realizadas por un cliente específico.

use("db_campus_alquiler");
db.reserva.find({ Estado: { $eq: "Pendiente" }, cliente_id: { $eq: 1 }});

//13
// Mostrar los empleados con cargo de "Gerente" o "Asistente". 

use("db_campus_alquiler");
db.empleado.find({
    $or: [
        {Cargo: { $eq: "Gerente" }}, 
        {Cargo: { $eq: "Vendedor" }}
    ]
});

//14
// Obtener los datos de los clientes que realizaron al menos un alquiler

use("db_campus_alquiler");
db.getCollection("cliente").aggregate([  
    {    
        $lookup: {      
            from: "alquiler",     
            localField: "_id",      
            foreignField: "cliente_id",      
            as: "Alquiler"   
         }  
    },  
    {
        $match: {Alquiler: { $ne: [] }}
    },
    {
        $unwind: "$Alquiler"
    },
    {
        $set: { Estado: "El cliente tiene alquileres registrados" }
    },
    {
        $group: {
            _id: "$_id",
            Nombre: {
                $first: "$Nombre"
            },
            Apellido: {
                $first: "$Apellido"
            },
            DNI: {
                $first: "$DNI"
            },
            Direccion: {
                $first: "$Direccion"
            },
            Telefono: {
                $first: "$Telefono"
            },
            Email: {
                $first: "$Email"
            },
            Estado: {
                $first: "$Estado"
            }
        }
    }
]);