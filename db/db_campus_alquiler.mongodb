use("db_campus_alquiler");
db.createCollection("sucursal", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ "_id", "ID_sucursal" ],
           title: "sucursal Validation",
           properties: {
                "_id": { "bsonType": "number" , 
                description: "'_id' must be of type number"},
                "ID_sucursal": { "bsonType": "number" , 
                description: "'ID_sucursal' must be of type number"},
                "Nombre": { "bsonType": "string" , 
                description: "'Nombre' must be of type string"},
                "Direccion": { "bsonType": "string" , 
                description: "'Direccion' must be of type string"},
                "Telefono": { "bsonType": "number" , 
                description: "'Telefono' must be of type number"}
           }
        }
    },
    validationAction: "error",
    validationLevel: "strict",
});
use("db_campus_alquiler");
db.createCollection("automovil", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ "_id", "ID_Automovil", "Marca", "Modelo", "Anio", "Tipo", "Capacidad", "Precio_Diario" ],
           title: "automovil Validation",
           properties: {
                "_id": { "bsonType": "number" , 
                description: "'_id' must be of type number"},
                "ID_Automovil": { "bsonType": "number" , 
                description: "'ID_Automovil' must be of type number"},
                "Marca": { "bsonType": "string" , 
                description: "'Marca' must be of type string"},
                "Modelo": { "bsonType": "string" , 
                description: "'Modelo' must be of type string"},
                "Anio": { "bsonType": "number" , 
                description: "'Anio' must be of type number"},
                "Tipo": { "bsonType": "string" , 
                description: "'Tipo' must be of type string"},
                "Capacidad": { "bsonType": "number" , 
                description: "'Capacidad' must be of type number"},
                "Precio_Diario": { "bsonType": "number" , 
                description: "'Precio_Diario' must be of type number decimal",
                "pattern": "^[0-9]+(\\.[0-9]{1,2})?$" }
           }
        }
    },
    validationAction: "error",
    validationLevel: "strict",
});
use("db_campus_alquiler");
db.createCollection("sucursal_automovil",{
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ "_id", "sucursal_id", "automovil_id", "Cantidad_Disponible"],
           title: "sucursal_automovil Validation",
           properties: {
                "_id": { "bsonType": "number" , 
                description: "'_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "sucursal_id": { "bsonType": "number" , 
                description: "'sucursal_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "automovil_id": { "bsonType": "number" , 
                description: "'automovil_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "Cantidad_Disponible": { "bsonType": "number" , 
                description: "'Cantidad_Disponible' must be of type number",
                "pattern": "^[1-9][0-9]*$"}
           }
        }
    },
    validationAction: "error",
    validationLevel: "strict",
});
use("db_campus_alquiler");
db.createCollection("cliente", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ "_id", "ID_Cliente", "Nombre", "Apellido", "DNI", "Direccion", "Telefono", "Email"],
           title: "cliente Validation",
           properties: {
                "_id": { "bsonType": "number" , 
                description: "'_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "ID_Cliente": { "bsonType": "number" , 
                description: "'ID_Cliente' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "Nombre": { "bsonType": "string" , 
                description: "'Nombre' must be of type string",},
                "Apellido": { "bsonType": "string" , 
                description: "'Apellido' must be of type string",},
                "DNI": { "bsonType": "string" , 
                description: "'Cantidad_Disponible' must be of type string",
                "pattern": "^[1-9][0-9]*$"},
                "Direccion": { "bsonType": "string" , 
                description: "'Direccion' must be of type string"},
                "Telefono": { "bsonType": "string" , 
                description: "'Cantidad_Disponible' must be of type string",
                "pattern": "^[1-9][0-9]*$"},
                "Email": { "bsonType": "string" , 
                description: "'Email' must be of type string"}
           }
        }
    },
    validationAction: "error",
    validationLevel: "strict",
});
use("db_campus_alquiler");
db.createCollection("alquiler", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ "_id", "ID_Alquiler", "cliente_id", "automovil_id", "Fecha_Inicio", "Fecha_Fin", "Costo_Total", "Estado"],
           title: "alquiler Validation",
           properties: {
                "_id": { "bsonType": "number" , 
                description: "'_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "ID_Alquiler": { "bsonType": "number" , 
                description: "'ID_Alquiler' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "cliente_id": { "bsonType": "number" , 
                description: "'cliente_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "automovil_id": { "bsonType": "number" , 
                description: "'automovil_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "Fecha_Inicio": { "bsonType": "date" , 
                description: "'Estado' must be of type date"},
                "Fecha_Fin": { "bsonType": "date" , 
                description: "'Estado' must be of type date"},
                "Costo_Total": { "bsonType": "number" , 
                description: "'Costo_Total' must be of type number decimal",
                "pattern": "^[0-9]+(\\.[0-9]{1,2})?$" },
                "Estado": { "bsonType": "string" , 
                description: "'Estado' must be of type string"}
           }
        }
    },
    validationAction: "error",
    validationLevel: "strict",
});
use("db_campus_alquiler");
db.createCollection("reserva", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ "_id", "ID_Reserva", "cliente_id", "automovil_id", "Fecha_Reserva", "Fecha_Inicio", "Fecha_Fin", "Estado"],
           title: "reserva Validation",
           properties: {
                "_id": { "bsonType": "number" , 
                description: "'_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "ID_Reserva": { "bsonType": "number" , 
                description: "'ID_Reserva' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "cliente_id": { "bsonType": "number" , 
                description: "'cliente_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "automovil_id": { "bsonType": "number" , 
                description: "'automovil_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "Fecha_Reserva": { "bsonType": "date" , 
                description: "'Estado' must be of type date"},
                "Fecha_Inicio": { "bsonType": "date" , 
                description: "'Estado' must be of type date"},
                "Fecha_Fin": { "bsonType": "date" , 
                description: "'Estado' must be of type date"},
                "Estado": { "bsonType": "string" , 
                description: "'Estado' must be of type string"}
           }
        }
    },
    validationAction: "error",
    validationLevel: "strict",
});
use("db_campus_alquiler");
db.createCollection("empleado", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ "_id", "ID_Empleado", "Nombre", "Apellido", "DNI", "Direccion", "Telefono", "Cargo"],
           title: "empleado Validation",
           properties: {
                "_id": { "bsonType": "number" , 
                description: "'_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "ID_Empleado": { "bsonType": "number" , 
                description: "'ID_Empleado' must be of type number",
                "pattern": "^[1-9][0-9]*$"},
                "Nombre": { "bsonType": "string" , 
                description: "'Nombre' must be of type string",},
                "Apellido": { "bsonType": "string" , 
                description: "'Apellido' must be of type string",},
                "DNI": { "bsonType": "string" , 
                description: "'Cantidad_Disponible' must be of type string",
                "pattern": "^[1-9][0-9]*$"},
                "Direccion": { "bsonType": "string" , 
                description: "'Direccion' must be of type string"},
                "Telefono": { "bsonType": "string" , 
                description: "'Cantidad_Disponible' must be of type string",
                "pattern": "^[1-9][0-9]*$"},
                "Cargo": { "bsonType": "string" , 
                description: "'Cargo' must be of type string"}
           }
        }
    },
    validationAction: "error",
    validationLevel: "strict",
});
use("db_campus_alquiler");
db.createCollection("registro_entrega",{
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ "_id", "ID_Registro", "alquiler_id", "empleado_id", "Fecha_Entrega", "Combustible_Entregado", "Kilometraje_Entregado"],
           title: "registro_entrega Validation",
           properties: {
                "_id": { "bsonType": "number" , 
                description: "'_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},

                "ID_Registro": { "bsonType": "number" , 
                description: "'ID_Registro' must be of type number",
                "pattern": "^[1-9][0-9]*$"},

                "alquiler_id": { "bsonType": "number" , 
                description: "'alquiler_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},

                "empleado_id": { "bsonType": "number" , 
                description: "'empleado_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},

                "Fecha_Entrega": { "bsonType": "date" , 
                description: "'Fecha_Entrega' must be of type date"},

                "Combustible_Entregado": { "bsonType": "number" , 
                description: "'Combustible_Entregado' must be of type number decimal",
                "pattern": "^[0-9]+(\\.[0-9]{1,2})?$" },

                "Kilometraje_Entregado": { "bsonType": "number" , 
                description: "'Kilometraje_Entregado' must be of type number",
                "pattern": "^[1-9][0-9]*$"}

                
           }
        }
    },
    validationAction: "error",
    validationLevel: "strict",
});
use("db_campus_alquiler");
db.createCollection("registro_devolucion", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ "_id", "ID_Registro", "alquiler_id", "empleado_id", "Fecha_Devolucion", "Combustible_Devuelto", "Kilometraje_Devuelto", "Monto_Adicional"],
           title: "registro_devolucion Validation",
           properties: {
                "_id": { "bsonType": "number" , 
                description: "'_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},

                "ID_Registro": { "bsonType": "number" , 
                description: "'ID_Registro' must be of type number",
                "pattern": "^[1-9][0-9]*$"},

                "alquiler_id": { "bsonType": "number" , 
                description: "'alquiler_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},

                "empleado_id": { "bsonType": "number" , 
                description: "'empleado_id' must be of type number",
                "pattern": "^[1-9][0-9]*$"},

                "Fecha_Devolucion": { "bsonType": "date" , 
                description: "'Fecha_Entrega' must be of type date"},

                "Combustible_Devuelto": { "bsonType": "number" , 
                description: "'Combustible_Devuelto' must be of type number decimal",
                "pattern": "^[0-9]+(\\.[0-9]{1,2})?$" },

                "Kilometraje_Devuelto": { "bsonType": "number" , 
                description: "'Kilometraje_Devuelto' must be of type number",
                "pattern": "^[1-9][0-9]*$"},

                "Monto_Adicional": { "bsonType": "number" , 
                description: "'Monto_Adicional' must be of type number decimal",
                "pattern": "^[0-9]+(\\.[0-9]{1,2})?$" }

                
           }
        }
    },
    validationAction: "error",
    validationLevel: "strict",
});

//🕵️Construccion Validaciones y Usuarios🕵️

//🚧👩‍💻Creacion de la coleccion Users👩‍💻🚧

use("db_campus_alquiler");
db.createCollection("usuario_Api", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ 
                "_id",
                "nombre",
                "email",
                "password",
                "codigo_Rol"
            ],
           title: "usuario_Api Validation",
           properties: {
                _id: { 
                    bsonType: "objectId" , 
                    description: "'_id' must be a valid ObjectId"
                },

                nombre: { 
                    bsonType: "string" , 
                    description: "'nombre' must be of type string with letters and numbers.",
                    pattern: "^[a-zA-Z0-9 ]+$",
                    maxLength: 255
                },

                email: { 
                    bsonType: "string" , 
                    pattern : "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$",
                    description: "'email' must be an email of less than 255 characters",
                    maxLength: 255
                },

                password: { 
                    bsonType: "string" , 
                    description: "'password' must be of type string.",
                    maxLength: 255
                },

                codigo_Rol: { 
                    bsonType: "string" , 
                    description: "'codigo_Rol' must be a valid code",
                    pattern: "^(CsWscIpEhqmr1987|CsWscYrYwyvemws22501)$"
                },
           },
           additionalProperties: false
        }
    },
    validationAction: "error",
    validationLevel: "strict"
});
//indices para evitar usuarios y correos repetidos.
use("db_campus_alquiler");
db.usuario_Api.createIndex({ nombre: 1 }, { unique: true });
db.usuario_Api.createIndex({ email: 1 }, { unique: true });

//🚧🔎Creacion de la coleccion roles_Api🔎🚧

use("db_campus_alquiler");
db.createCollection("roles_Api", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ 
                "_id",
                "rol",
                "acceso"
            ],
           title: "roles_Api Validation",
           properties: {
                _id: { 
                    bsonType: "string" , 
                    description: "'_id' must be of type string",
                    pattern: "^(CsWscIpEhqmr1987|CsWscYrYwyvemws22501)$"
                },

                rol: { 
                    bsonType: "string" , 
                    description: "'rol' must be of type string with letters and numbers.",
                    pattern: "^[a-zA-Z0-9 ]+$",
                    maxLength: 20
                },

                acceso: { 
                    bsonType: "string" , 
                    description: "'acceso' must be of type string with letters and numbers.",
                    pattern: "^[a-zA-Z0-9 ]+$",
                    maxLength: 200
                }
           },
           additionalProperties: false
        }
    },
    validationAction: "error",
    validationLevel: "strict",
});


// el codigo de codigo "CsWscIpEhqmr1987" es una encriptacion con cifrado cesar con desplazamiento 4, la palabra original es "YoSoyElAdmin1987"
// el codigo de codigo "CsWscYrYwyvemws22501" es una encriptacion con cifrado cesar con desplazamiento 4, la palabra original es "YoSoyUnUsuario22501"

//🚧🎫Creacion de la coleccion tokens_Api🎫🚧

use("db_campus_alquiler");
db.createCollection("tokens_Api", {
    validator: {
        $jsonSchema: {
           bsonType: "object",
           required: [ 
                "_id",
                "id_usuario_Api",
                "token"
            ],
           title: "tokens_Api Validation",
           properties: {
                _id: { 
                    bsonType: "objectId" , 
                    description: "'_id' must be a valid ObjectId"
                },

                id_usuario_Api: { 
                    bsonType: "objectId" , 
                    description: "'id_usuario_Api' must be a valid ObjectId"
                },

                token: { 
                    bsonType: "string" , 
                    description: "'token' must be of type string.",
                }
           },
           additionalProperties: false
        }
    },
    validationAction: "error",
    validationLevel: "strict",
});


//🪓🔎Inyeccion de documentos para la coleccion Roles_Api🔎🪓

use("db_campus_alquiler");
db.roles_Api.insertMany([
    {
      "_id": "CsWscIpEhqmr1987",
      "rol": "Admin",
      "acceso": "Acceso completo a los metodos de crud de todas las colecciones solicitadas por el admin"
    },
    {
      "_id": "CsWscYrYwyvemws22501",
      "rol": "Usuario",
      "acceso": "Acceso a los metodos GET de todas las colecciones solicitadas por el admin"
    }
]);

use("db_campus_alquiler");
db.usuario_Api.insertMany([
    {
      "_id": 1,
      "nombre": "FredCreations",
      "email": "juanjoseduranrincon404@gmail.com",
      "password": "Monochrome1dcg3",
      "codigo_Rol": "CsWscIpEhqmr1987"
    },
    {
        "_id": 2,
        "nombre": "Silver",
        "email": "prueba1@gmail.com",
        "password": "1234",
        "codigo_Rol": "CsWscYrYwyvemws22501"
      }
]);
  
// Inyeccion de data para la coleccion sucursal

use("db_campus_alquiler");
db.sucursal.insertMany([
    {
        _id: 1,
        ID_sucursal: 1,
        Nombre: "Zona Franca",
        Direccion: "Florida",
        Telefono: 131312
    },
    {
        _id: 2,
        ID_sucursal: 2,
        Nombre: "Exito",
        Direccion: "Cabecera",
        Telefono: 4353424
    },
    {
        _id: 3,
        ID_sucursal: 3,
        Nombre: "La Rosita",
        Direccion: "Bucaramanga",
        Telefono: 2344563
    },
    {
        _id: 4,
        ID_sucursal: 4,
        Nombre: "Sucursal Plus",
        Direccion: "Giron",
        Telefono: 6433522
    },
    {
        _id: 5,
        ID_sucursal: 5,
        Nombre: "Zona Franca",
        Direccion: "Florida",
        Telefono: 4356546
    }
]);

// Inyeccion de data para la coleccion automovil

use("db_campus_alquiler");
db.automovil.insertMany([
    {
        _id: 1,
        ID_Automovil: 1,
        Marca: "Toyota",
        Modelo: "Toyota Camry",
        Anio: 2023,
        Tipo: "	Turismo",
        Capacidad: 4,
        Precio_Diario: 250000.00
    },
    {
        _id: 2,
        ID_Automovil: 2,
        Marca: "Toyota",
        Modelo: "Toyota Corolla",
        Anio: 2023,
        Tipo: "Turismo",
        Capacidad: 4,
        Precio_Diario: 200000.00
    },
    {
        _id: 3,
        ID_Automovil: 3,
        Marca: "Toyota",
        Modelo: "Toyota RAV4",
        Anio: 2023,
        Tipo: "SUV",
        Capacidad: 5,
        Precio_Diario: 150000.00
    },
    {
        _id: 4,
        ID_Automovil: 4,
        Marca: "Toyota",
        Modelo: "Toyota Prius",
        Anio: 2023,
        Tipo: "Híbrido",
        Capacidad: 5,
        Precio_Diario: 350000.00
    },
    {
        _id: 5,
        ID_Automovil: 5,
        Marca: "Toyota",
        Modelo: "Toyota Highlander",
        Anio: 2023,
        Tipo: "SUV",
        Capacidad: 7,
        Precio_Diario: 390000.00
    }
]);


// Inyeccion de data para la coleccion sucursal_automovil

use("db_campus_alquiler");
db.sucursal_automovil.insertMany([
    {
        _id: 1,
        sucursal_id: 1,
        automovil_id: 2,
        Cantidad_Disponible: 3
    },
    {
        _id: 2,
        sucursal_id: 5,
        automovil_id: 3,
        Cantidad_Disponible: 4
    },
    {
        _id: 3,
        sucursal_id: 3,
        automovil_id: 1,
        Cantidad_Disponible: 6
    },
    {
        _id: 4,
        sucursal_id: 4,
        automovil_id: 3,
        Cantidad_Disponible: 1
    },
    {
        _id: 5,
        sucursal_id: 2,
        automovil_id: 2,
        Cantidad_Disponible: 5
    }
]);

// Inyeccion de data para la coleccion cliente

use("db_campus_alquiler");
db.cliente.insertMany([
    {
        _id: 1,
        ID_Cliente: 1,
        Nombre: "Maria",
        Apellido: "Rodriguez",
        DNI: "343434",
        Direccion: "carreca 11 12-23",
        Telefono: "232312321",
        Email: "Maria@gmail.com"
    },
    {
        _id: 2,
        ID_Cliente: 2,
        Nombre: "Jose",
        Apellido: "Ortega",
        DNI: "1225631215",
        Direccion: "carreca 11 01-23",
        Telefono: "315235695",
        Email: "Maria@gmail.com"
    },
    {
        _id: 3,
        ID_Cliente: 3,
        Nombre: "Romeo",
        Apellido: "Santos",
        DNI: "22554451",
        Direccion: "carreca 12 12-23",
        Telefono: "315685989",
        Email: "Romeo@gmail.com"
    },
    {
        _id: 4,
        ID_Cliente: 4,
        Nombre: "Roberto",
        Apellido: "Muñoz",
        DNI: "45897812564",
        Direccion: "carreca 34 12-23",
        Telefono: "23156855",
        Email: "Roberto@gmail.com"
    },
    {
        _id: 5,
        ID_Cliente: 5,
        Nombre: "Antonio",
        Apellido: "Rodriguez",
        DNI: "125233544",
        Direccion: "carreca 11 12-23",
        Telefono: "351554",
        Email: "Antonio@gmail.com"
    }
]);

// Inyeccion de data para la coleccion alquiler

use("db_campus_alquiler");
db.alquiler.insertMany([
    {
        _id: 1,
        ID_Alquiler: 1,
        cliente_id: 2,
        automovil_id: 2,
        Fecha_Inicio: ISODate("2023-07-05T12:00:00Z"),
        Fecha_Fin: ISODate("2023-08-01T12:00:00Z"),
        Costo_Total: 2800000.00,
        Estado: "Activo"
    },
    {
        _id: 2,
        ID_Alquiler: 2,
        cliente_id: 1,
        automovil_id: 3,
        Fecha_Inicio: ISODate("2023-07-11T12:00:00Z"),
        Fecha_Fin: ISODate("2023-07-21T12:00:00Z"),
        Costo_Total: 450000.00,
        Estado: "Activo"
    },
    {
        _id: 3,
        ID_Alquiler: 3,
        cliente_id: 1,
        automovil_id: 2,
        Fecha_Inicio: ISODate("2023-08-01T12:00:00Z"),
        Fecha_Fin: ISODate("2023-08-12T12:00:00Z"),
        Costo_Total: 1600000.00,
        Estado: "Pendiente"
    },
    {
        _id: 4,
        ID_Alquiler: 4,
        cliente_id: 4,
        automovil_id: 1,
        Fecha_Inicio: ISODate("2023-07-07T12:00:00Z"),
        Fecha_Fin: ISODate("2023-08-11T12:00:00Z"),
        Costo_Total: 250000.00,
        Estado: "Pendiente"
    },
    {
        _id: 5,
        ID_Alquiler: 5,
        cliente_id: 5,
        automovil_id: 1,
        Fecha_Inicio: ISODate("2023-12-01T12:00:00Z"),
        Fecha_Fin: ISODate("2024-01-01T12:00:00Z"),
        Costo_Total: 2500000.00,
        Estado: "Pendiente"
    }
]);

// Inyeccion de data para la coleccion reserva

use("db_campus_alquiler");
db.reserva.insertMany([
    {
        _id: 1,
        ID_Reserva: 1,
        cliente_id: 1,
        automovil_id: 4,
        Fecha_Reserva: ISODate("2023-04-07T12:00:00Z"),
        Fecha_Inicio: ISODate("2023-05-09T12:00:00Z"),
        Fecha_Fin: ISODate("2023-12-15T12:00:00Z"),
        Estado: "Pendiente"
      },
      {
        _id: 2,
        ID_Reserva: 2,
        cliente_id: 3,
        automovil_id: 2,
        Fecha_Reserva: ISODate("2023-04-12T12:00:00Z"),
        Fecha_Inicio: ISODate("2023-05-15T12:00:00Z"),
        Fecha_Fin: ISODate("2023-12-15T12:00:00Z"),
        Estado: "Pendiente"
      },
      {
        _id: 3,
        ID_Reserva: 3,
        cliente_id: 2,
        automovil_id: 1,
        Fecha_Reserva: ISODate("2023-04-12T12:00:00Z"),
        Fecha_Inicio: ISODate("2023-07-09T12:00:00Z"),
        Fecha_Fin: ISODate("2023-08-11T12:00:00Z"),
        Estado: "Finalizada"
      },
      {
        _id: 4,
        ID_Reserva: 4,
        cliente_id: 4,
        automovil_id: 3,
        Fecha_Reserva: ISODate("2023-04-07T12:00:00Z"),
        Fecha_Inicio: ISODate("2023-05-09T12:00:00Z"),
        Fecha_Fin: ISODate("2023-05-15T12:00:00Z"),
        Estado: "Finalizada"
      },
      {
        _id: 5,
        ID_Reserva: 5,
        cliente_id: 5,
        automovil_id: 3,
        Fecha_Reserva: ISODate("2023-02-07T12:00:00Z"),
        Fecha_Inicio: ISODate("2023-03-09T12:00:00Z"),
        Fecha_Fin: ISODate("2023-04-12T12:00:00Z"),
        Estado: "Pendiente"
      }
]);

// Inyeccion de data para la coleccion empleado

use("db_campus_alquiler");
db.empleado.insertMany([
    {
        _id: 1,
        ID_Empleado: 1,
        Nombre: "Juan Jose",
        Apellido: "Rincon",
        DNI: "12344234",
        Direccion: "carreca 54 23-11",
        Telefono: "234231",
        Cargo: "Gerente"
    },
    {
        _id: 2,
        ID_Empleado: 2,
        Nombre: "Jose Luis",
        Apellido: "Ramirez",
        DNI: "546645131",
        Direccion: "carreca 43 23-11",
        Telefono: "234231",
        Cargo: "Asistente"
    },
    {
        _id: 3,
        ID_Empleado: 3,
        Nombre: "Angel",
        Apellido: "ortega",
        DNI: "7888994",
        Direccion: "carreca 23 23-11",
        Telefono: "234231",
        Cargo: "Asistente"
    },
    {
        _id: 4,
        ID_Empleado: 4,
        Nombre: "Laura",
        Apellido: "Rincon",
        DNI: "4545645",
        Direccion: "carreca 54 23-11",
        Telefono: "234231",
        Cargo: "Vendedor"
    },
    {
        _id: 5,
        ID_Empleado: 5,
        Nombre: "Antony",
        Apellido: "Villa",
        DNI: "5524554",
        Direccion: "carreca 54 23-11",
        Telefono: "234231",
        Cargo: "Vendedor"
    }
]);

// Inyeccion de data para la coleccion registro_entrega

use("db_campus_alquiler");
db.registro_entrega.insertMany([
    {
        _id: 1,
        ID_Registro: 1,
        alquiler_id: 1,
        empleado_id: 2,
        Fecha_Entrega: ISODate("2023-04-07T12:00:00Z"),
        Combustible_Entregado: 11.5,
        Kilometraje_Entregado: 5000
    },
    {
        _id: 2,
        ID_Registro: 2,
        alquiler_id: 4,
        empleado_id: 3,
        Fecha_Entrega: ISODate("2023-01-15T12:00:00Z"),
        Combustible_Entregado: 2.5,
        Kilometraje_Entregado: 5001
    },
    {
        _id: 3,
        ID_Registro: 3,
        alquiler_id: 2,
        empleado_id: 2,
        Fecha_Entrega: ISODate("2023-09-30T12:00:00Z"),
        Combustible_Entregado: 12.5,
        Kilometraje_Entregado: 5000
    },
    {
        _id: 4,
        ID_Registro: 4,
        alquiler_id: 4,
        empleado_id: 5,
        Fecha_Entrega: ISODate("2023-05-07T12:00:00Z"),
        Combustible_Entregado: 6.5,
        Kilometraje_Entregado: 6000
    },
    {
        _id: 5,
        ID_Registro: 5,
        alquiler_id: 3,
        empleado_id: 1,
        Fecha_Entrega: ISODate("2023-04-17T12:00:00Z"),
        Combustible_Entregado: 3.5,
        Kilometraje_Entregado: 10000
    }  
]);

// Inyeccion de data para la coleccion registro_devolucion

use("db_campus_alquiler");
db.registro_devolucion.insertMany([
    {
        _id: 1,
        ID_Registro: 1,
        alquiler_id: 1,
        empleado_id: 2,
        Fecha_Devolucion: ISODate("2023-04-07T12:00:00Z"),
        Combustible_Devuelto: 2.5,
        Kilometraje_Devuelto: 1566,
        Monto_Adicional: 100000.00
    },
    {
        _id: 2,
        ID_Registro: 2,
        alquiler_id: 4,
        empleado_id: 3,
        Fecha_Devolucion: ISODate("2023-05-03T12:00:00Z"),
        Combustible_Devuelto: 11.5,
        Kilometraje_Devuelto: 2000,
        Monto_Adicional: 20000.00
    },
    {
        _id: 3,
        ID_Registro: 3,
        alquiler_id: 5,
        empleado_id: 1,
        Fecha_Devolucion: ISODate("2023-03-07T12:00:00Z"),
        Combustible_Devuelto: 6.5,
        Kilometraje_Devuelto: 1250,
        Monto_Adicional: 100.00
    },
    {
        _id: 4,
        ID_Registro: 4,
        alquiler_id: 2,
        empleado_id: 3,
        Fecha_Devolucion: ISODate("2023-07-07T12:00:00Z"),
        Combustible_Devuelto: 9.5,
        Kilometraje_Devuelto: 2566,
        Monto_Adicional: 20500.00
    },
    {
        _id: 5,
        ID_Registro: 5,
        alquiler_id: 5,
        empleado_id: 1,
        Fecha_Devolucion: ISODate("2023-11-11T12:00:00Z"),
        Combustible_Devuelto: 0.5,
        Kilometraje_Devuelto: 2500,
        Monto_Adicional: 50000.00
    }
]);

//🪓🔎Inyeccion de documentos para la coleccion Roles_Api🔎🪓

use("db_campus_alquiler");
db.roles_Api.insertMany([
    {
      "_id": "CsWscIpEhqmr1987",
      "rol": "Admin",
      "acceso": "Acceso completo a los metodos de crud de todas las colecciones solicitadas por el admin"
    },
    {
      "_id": "CsWscYrYwyvemws22501",
      "rol": "Usuario",
      "acceso": "Acceso a los metodos GET de todas las colecciones solicitadas por el admin"
    }
]);

//🪓🎞️Inyeccion de documentos para la coleccion usuario_Api🎞️🪓

use("db_campus_alquiler");
db.usuario_Api.insertMany([
    {
      "nombre": "FredCreations",
      "email": "juanjoseduranrincon404@gmail.com",
      "password": "Monochrome1dcg3",
      "codigo_Rol": "CsWscIpEhqmr1987"
    },
    {
      "nombre": "Silver",
      "email": "prueba1@gmail.com",
      "password": "1234",
      "codigo_Rol": "CsWscYrYwyvemws22501"
    }
]);




//Llamado de data segun las llaves foraneas

//Llamado de data de sucursal teniendo en cuenta su relacion con sucursal_automovil

use("db_campus_alquiler");
db.getCollection("sucursal").aggregate({
    $lookup:{
        from: "sucursal_automovil",
        localField: "_id",
        foreignField: "sucursal_id",
        as: "Sucursal_Auto"
    }
});

//Llamado de data de automovil teniendo en cuenta su relacion con sucursal_automovil

use("db_campus_alquiler");
db.getCollection("automovil").aggregate({
    $lookup:{
        from: "sucursal_automovil",
        localField: "_id",
        foreignField: "automovil_id",
        as: "Automovil_Suc"
    }
});

//Llamado de data de automovil teniendo en cuenta su relacion con alquiler

use("db_campus_alquiler");
db.getCollection("automovil").aggregate({
    $lookup:{
        from: "alquiler",
        localField: "_id",
        foreignField: "automovil_id",
        as: "Alquileres"
    }
});

//Llamado de data de cliente teniendo en cuenta su relacion con alquiler

use("db_campus_alquiler");
db.getCollection("cliente").aggregate({
    $lookup:{
        from: "alquiler",
        localField: "_id",
        foreignField: "cliente_id",
        as: "Alquileres"
    }
});

//Llamado de data de automovil teniendo en cuenta su relacion con reserva

use("db_campus_alquiler");
db.getCollection("automovil").aggregate({
    $lookup:{
        from: "reserva",
        localField: "_id",
        foreignField: "automovil_id",
        as: "Reservas"
    }
});

//Llamado de data de cliente teniendo en cuenta su relacion con reserva

use("db_campus_alquiler");
db.getCollection("cliente").aggregate({
    $lookup:{
        from: "reserva",
        localField: "_id",
        foreignField: "cliente_id",
        as: "Alquileres"
    }
});

//Llamado de data de empleado teniendo en cuenta su relacion con registro_entrega

use("db_campus_alquiler");
db.getCollection("empleado").aggregate({
    $lookup:{
        from: "registro_entrega",
        localField: "_id",
        foreignField: "empleado_id",
        as: "Entregas"
    }
});

//Llamado de data de alquiler teniendo en cuenta su relacion con registro_entrega

use("db_campus_alquiler");
db.getCollection("alquiler").aggregate({
    $lookup:{
        from: "registro_entrega",
        localField: "_id",
        foreignField: "alquiler_id",
        as: "Entregas"
    }
});

//Llamado de data de empleado teniendo en cuenta su relacion con registro_devolucion

use("db_campus_alquiler");
db.getCollection("empleado").aggregate({
    $lookup:{
        from: "registro_devolucion",
        localField: "_id",
        foreignField: "empleado_id",
        as: "Devoluciones"
    }
});

//Llamado de data de alquiler teniendo en cuenta su relacion con registro_devolucion

use("db_campus_alquiler");
db.getCollection("alquiler").aggregate({
    $lookup:{
        from: "registro_devolucion",
        localField: "_id",
        foreignField: "alquiler_id",
        as: "Devoluciones"
    }
});